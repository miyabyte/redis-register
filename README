// Through Redis, obtain the list of programs using this package and their change information in real-time.

type NodeEvent struct {
	NodeID       string         // Current node ID
	NodeCount    int            // Latest total number of nodes
	OldCount     int            // Total number before change
	SelfPosition int            // Latest position of the current node
	OldPos       int            // Position before change
	ChangeType   string         // Type of change: join/rejoin/failed/leave/update/init
	Timestamp    int64          // Event timestamp (in milliseconds)
	NodeList     []NodeInfoResp // Latest list of active nodes
}

1. nodeMgr, err := NewNodeManager(ctx, cfg, redisClient)
2. callback1 := func(event NodeEvent) {
   		log.Infof("=== callback1 received event ===")
   		log.Infof("nodeEvent=%+v", event)
   	}
   	if err := nodeMgr.RegisterCallback("c1", callback1); err != nil {
   		log.Fatalf("register callback1 failed: %v", err)
   	}
